.data
value1: .word 2 #number of comparison to do (n-1) where n is the total number of elements in the array
value2: .word 2
array1: .word 1 2 3#the values to be stored entered by the user
array2: .word 1 2 3#the values for the second array

.text
la x10,array1#loading the base address in x10
la x11,array2#loading into the address of x11
lw x5,value1 #loading the total number of element into the register
lw x30,value2

loop1:
lw x6,0(x10) #first position of the vector1
lw x7,4(x10)#second position of the vector1
lw x28,0(x11)#first position of the array2
lw x29,4(x11)#second position of array 2
blt x7,x6,swap1 #move to swap1 if x7 is less than x6
addi x10,x10,4 #moving to the next position in the array
blt x29,x28,swap2 #move to swap2 if x29 is less than x28
addi x11,x11,4 #moving to the next position
addi x5,x5,-1 #decrementing the counter
bne x5,x0,loop1 #execute if x5 is not equal to zero
j final #jump to the final position

swap1:
sw x6,4(x10) #changing tbe position of the values
sw x7,0(x10)
j loop1

swap2:
sw x28,4(x11)#swapping elements in array 2
sw x29,0(x11)
j loop1

#comparing the array if they are equal
final:
lw x6,0(x10)#load first position into 
lw x28,0(x11)
bne x6,x28,count
li x31,0 #return 0 if they are not permutation of each other

count:
addi x10,x10,4 #to the next index
addi x11,x11,4#to the next index
addi x30,x30,-1 #decrementing the counter
beq x30,x0,end #stopping execution when the counter is 0
addi x31,x31,1#returning 1 if they are permutation of each other
j final

end:
